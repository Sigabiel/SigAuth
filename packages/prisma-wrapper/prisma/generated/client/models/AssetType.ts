
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AssetType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AssetType
 * 
 */
export type AssetTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$AssetTypePayload>

export type AggregateAssetType = {
  _count: AssetTypeCountAggregateOutputType | null
  _avg: AssetTypeAvgAggregateOutputType | null
  _sum: AssetTypeSumAggregateOutputType | null
  _min: AssetTypeMinAggregateOutputType | null
  _max: AssetTypeMaxAggregateOutputType | null
}

export type AssetTypeAvgAggregateOutputType = {
  id: number | null
}

export type AssetTypeSumAggregateOutputType = {
  id: number | null
}

export type AssetTypeMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type AssetTypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type AssetTypeCountAggregateOutputType = {
  id: number
  name: number
  fields: number
  _all: number
}


export type AssetTypeAvgAggregateInputType = {
  id?: true
}

export type AssetTypeSumAggregateInputType = {
  id?: true
}

export type AssetTypeMinAggregateInputType = {
  id?: true
  name?: true
}

export type AssetTypeMaxAggregateInputType = {
  id?: true
  name?: true
}

export type AssetTypeCountAggregateInputType = {
  id?: true
  name?: true
  fields?: true
  _all?: true
}

export type AssetTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetType to aggregate.
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTypes to fetch.
   */
  orderBy?: Prisma.AssetTypeOrderByWithRelationInput | Prisma.AssetTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssetTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AssetTypes
  **/
  _count?: true | AssetTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssetTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssetTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssetTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssetTypeMaxAggregateInputType
}

export type GetAssetTypeAggregateType<T extends AssetTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateAssetType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssetType[P]>
    : Prisma.GetScalarType<T[P], AggregateAssetType[P]>
}




export type AssetTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetTypeWhereInput
  orderBy?: Prisma.AssetTypeOrderByWithAggregationInput | Prisma.AssetTypeOrderByWithAggregationInput[]
  by: Prisma.AssetTypeScalarFieldEnum[] | Prisma.AssetTypeScalarFieldEnum
  having?: Prisma.AssetTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssetTypeCountAggregateInputType | true
  _avg?: AssetTypeAvgAggregateInputType
  _sum?: AssetTypeSumAggregateInputType
  _min?: AssetTypeMinAggregateInputType
  _max?: AssetTypeMaxAggregateInputType
}

export type AssetTypeGroupByOutputType = {
  id: number
  name: string
  fields: runtime.JsonValue
  _count: AssetTypeCountAggregateOutputType | null
  _avg: AssetTypeAvgAggregateOutputType | null
  _sum: AssetTypeSumAggregateOutputType | null
  _min: AssetTypeMinAggregateOutputType | null
  _max: AssetTypeMaxAggregateOutputType | null
}

type GetAssetTypeGroupByPayload<T extends AssetTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssetTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssetTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssetTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssetTypeGroupByOutputType[P]>
      }
    >
  >



export type AssetTypeWhereInput = {
  AND?: Prisma.AssetTypeWhereInput | Prisma.AssetTypeWhereInput[]
  OR?: Prisma.AssetTypeWhereInput[]
  NOT?: Prisma.AssetTypeWhereInput | Prisma.AssetTypeWhereInput[]
  id?: Prisma.IntFilter<"AssetType"> | number
  name?: Prisma.StringFilter<"AssetType"> | string
  fields?: Prisma.JsonFilter<"AssetType">
  assets?: Prisma.AssetListRelationFilter
}

export type AssetTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  fields?: Prisma.SortOrder
  assets?: Prisma.AssetOrderByRelationAggregateInput
}

export type AssetTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AssetTypeWhereInput | Prisma.AssetTypeWhereInput[]
  OR?: Prisma.AssetTypeWhereInput[]
  NOT?: Prisma.AssetTypeWhereInput | Prisma.AssetTypeWhereInput[]
  name?: Prisma.StringFilter<"AssetType"> | string
  fields?: Prisma.JsonFilter<"AssetType">
  assets?: Prisma.AssetListRelationFilter
}, "id">

export type AssetTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  fields?: Prisma.SortOrder
  _count?: Prisma.AssetTypeCountOrderByAggregateInput
  _avg?: Prisma.AssetTypeAvgOrderByAggregateInput
  _max?: Prisma.AssetTypeMaxOrderByAggregateInput
  _min?: Prisma.AssetTypeMinOrderByAggregateInput
  _sum?: Prisma.AssetTypeSumOrderByAggregateInput
}

export type AssetTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssetTypeScalarWhereWithAggregatesInput | Prisma.AssetTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssetTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssetTypeScalarWhereWithAggregatesInput | Prisma.AssetTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AssetType"> | number
  name?: Prisma.StringWithAggregatesFilter<"AssetType"> | string
  fields?: Prisma.JsonWithAggregatesFilter<"AssetType">
}

export type AssetTypeCreateInput = {
  name: string
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
  assets?: Prisma.AssetCreateNestedManyWithoutTypeInput
}

export type AssetTypeUncheckedCreateInput = {
  id?: number
  name: string
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutTypeInput
}

export type AssetTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  assets?: Prisma.AssetUpdateManyWithoutTypeNestedInput
}

export type AssetTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  assets?: Prisma.AssetUncheckedUpdateManyWithoutTypeNestedInput
}

export type AssetTypeCreateManyInput = {
  id?: number
  name: string
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  fields?: Prisma.SortOrder
}

export type AssetTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AssetTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type AssetTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type AssetTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AssetTypeScalarRelationFilter = {
  is?: Prisma.AssetTypeWhereInput
  isNot?: Prisma.AssetTypeWhereInput
}

export type AssetTypeCreateNestedOneWithoutAssetsInput = {
  create?: Prisma.XOR<Prisma.AssetTypeCreateWithoutAssetsInput, Prisma.AssetTypeUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.AssetTypeCreateOrConnectWithoutAssetsInput
  connect?: Prisma.AssetTypeWhereUniqueInput
}

export type AssetTypeUpdateOneRequiredWithoutAssetsNestedInput = {
  create?: Prisma.XOR<Prisma.AssetTypeCreateWithoutAssetsInput, Prisma.AssetTypeUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.AssetTypeCreateOrConnectWithoutAssetsInput
  upsert?: Prisma.AssetTypeUpsertWithoutAssetsInput
  connect?: Prisma.AssetTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AssetTypeUpdateToOneWithWhereWithoutAssetsInput, Prisma.AssetTypeUpdateWithoutAssetsInput>, Prisma.AssetTypeUncheckedUpdateWithoutAssetsInput>
}

export type AssetTypeCreateWithoutAssetsInput = {
  name: string
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetTypeUncheckedCreateWithoutAssetsInput = {
  id?: number
  name: string
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetTypeCreateOrConnectWithoutAssetsInput = {
  where: Prisma.AssetTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetTypeCreateWithoutAssetsInput, Prisma.AssetTypeUncheckedCreateWithoutAssetsInput>
}

export type AssetTypeUpsertWithoutAssetsInput = {
  update: Prisma.XOR<Prisma.AssetTypeUpdateWithoutAssetsInput, Prisma.AssetTypeUncheckedUpdateWithoutAssetsInput>
  create: Prisma.XOR<Prisma.AssetTypeCreateWithoutAssetsInput, Prisma.AssetTypeUncheckedCreateWithoutAssetsInput>
  where?: Prisma.AssetTypeWhereInput
}

export type AssetTypeUpdateToOneWithWhereWithoutAssetsInput = {
  where?: Prisma.AssetTypeWhereInput
  data: Prisma.XOR<Prisma.AssetTypeUpdateWithoutAssetsInput, Prisma.AssetTypeUncheckedUpdateWithoutAssetsInput>
}

export type AssetTypeUpdateWithoutAssetsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetTypeUncheckedUpdateWithoutAssetsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type AssetTypeCountOutputType
 */

export type AssetTypeCountOutputType = {
  assets: number
}

export type AssetTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  assets?: boolean | AssetTypeCountOutputTypeCountAssetsArgs
}

/**
 * AssetTypeCountOutputType without action
 */
export type AssetTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTypeCountOutputType
   */
  select?: Prisma.AssetTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AssetTypeCountOutputType without action
 */
export type AssetTypeCountOutputTypeCountAssetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetWhereInput
}


export type AssetTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  fields?: boolean
  assets?: boolean | Prisma.AssetType$assetsArgs<ExtArgs>
  _count?: boolean | Prisma.AssetTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetType"]>

export type AssetTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  fields?: boolean
}, ExtArgs["result"]["assetType"]>

export type AssetTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  fields?: boolean
}, ExtArgs["result"]["assetType"]>

export type AssetTypeSelectScalar = {
  id?: boolean
  name?: boolean
  fields?: boolean
}

export type AssetTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "fields", ExtArgs["result"]["assetType"]>
export type AssetTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  assets?: boolean | Prisma.AssetType$assetsArgs<ExtArgs>
  _count?: boolean | Prisma.AssetTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type AssetTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AssetTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AssetTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AssetType"
  objects: {
    assets: Prisma.$AssetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    fields: runtime.JsonValue
  }, ExtArgs["result"]["assetType"]>
  composites: {}
}

export type AssetTypeGetPayload<S extends boolean | null | undefined | AssetTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssetTypePayload, S>

export type AssetTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssetTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssetTypeCountAggregateInputType | true
  }

export interface AssetTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetType'], meta: { name: 'AssetType' } }
  /**
   * Find zero or one AssetType that matches the filter.
   * @param {AssetTypeFindUniqueArgs} args - Arguments to find a AssetType
   * @example
   * // Get one AssetType
   * const assetType = await prisma.assetType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssetTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, AssetTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AssetType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssetTypeFindUniqueOrThrowArgs} args - Arguments to find a AssetType
   * @example
   * // Get one AssetType
   * const assetType = await prisma.assetType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssetTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssetTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeFindFirstArgs} args - Arguments to find a AssetType
   * @example
   * // Get one AssetType
   * const assetType = await prisma.assetType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssetTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, AssetTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeFindFirstOrThrowArgs} args - Arguments to find a AssetType
   * @example
   * // Get one AssetType
   * const assetType = await prisma.assetType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssetTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssetTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AssetTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssetTypes
   * const assetTypes = await prisma.assetType.findMany()
   * 
   * // Get first 10 AssetTypes
   * const assetTypes = await prisma.assetType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const assetTypeWithIdOnly = await prisma.assetType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AssetTypeFindManyArgs>(args?: Prisma.SelectSubset<T, AssetTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AssetType.
   * @param {AssetTypeCreateArgs} args - Arguments to create a AssetType.
   * @example
   * // Create one AssetType
   * const AssetType = await prisma.assetType.create({
   *   data: {
   *     // ... data to create a AssetType
   *   }
   * })
   * 
   */
  create<T extends AssetTypeCreateArgs>(args: Prisma.SelectSubset<T, AssetTypeCreateArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AssetTypes.
   * @param {AssetTypeCreateManyArgs} args - Arguments to create many AssetTypes.
   * @example
   * // Create many AssetTypes
   * const assetType = await prisma.assetType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssetTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, AssetTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AssetTypes and returns the data saved in the database.
   * @param {AssetTypeCreateManyAndReturnArgs} args - Arguments to create many AssetTypes.
   * @example
   * // Create many AssetTypes
   * const assetType = await prisma.assetType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AssetTypes and only return the `id`
   * const assetTypeWithIdOnly = await prisma.assetType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssetTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssetTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AssetType.
   * @param {AssetTypeDeleteArgs} args - Arguments to delete one AssetType.
   * @example
   * // Delete one AssetType
   * const AssetType = await prisma.assetType.delete({
   *   where: {
   *     // ... filter to delete one AssetType
   *   }
   * })
   * 
   */
  delete<T extends AssetTypeDeleteArgs>(args: Prisma.SelectSubset<T, AssetTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AssetType.
   * @param {AssetTypeUpdateArgs} args - Arguments to update one AssetType.
   * @example
   * // Update one AssetType
   * const assetType = await prisma.assetType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssetTypeUpdateArgs>(args: Prisma.SelectSubset<T, AssetTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AssetTypes.
   * @param {AssetTypeDeleteManyArgs} args - Arguments to filter AssetTypes to delete.
   * @example
   * // Delete a few AssetTypes
   * const { count } = await prisma.assetType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssetTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssetTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssetTypes
   * const assetType = await prisma.assetType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssetTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, AssetTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetTypes and returns the data updated in the database.
   * @param {AssetTypeUpdateManyAndReturnArgs} args - Arguments to update many AssetTypes.
   * @example
   * // Update many AssetTypes
   * const assetType = await prisma.assetType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AssetTypes and only return the `id`
   * const assetTypeWithIdOnly = await prisma.assetType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssetTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssetTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AssetType.
   * @param {AssetTypeUpsertArgs} args - Arguments to update or create a AssetType.
   * @example
   * // Update or create a AssetType
   * const assetType = await prisma.assetType.upsert({
   *   create: {
   *     // ... data to create a AssetType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssetType we want to update
   *   }
   * })
   */
  upsert<T extends AssetTypeUpsertArgs>(args: Prisma.SelectSubset<T, AssetTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__AssetTypeClient<runtime.Types.Result.GetResult<Prisma.$AssetTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AssetTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeCountArgs} args - Arguments to filter AssetTypes to count.
   * @example
   * // Count the number of AssetTypes
   * const count = await prisma.assetType.count({
   *   where: {
   *     // ... the filter for the AssetTypes we want to count
   *   }
   * })
  **/
  count<T extends AssetTypeCountArgs>(
    args?: Prisma.Subset<T, AssetTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssetTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AssetType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssetTypeAggregateArgs>(args: Prisma.Subset<T, AssetTypeAggregateArgs>): Prisma.PrismaPromise<GetAssetTypeAggregateType<T>>

  /**
   * Group by AssetType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssetTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssetTypeGroupByArgs['orderBy'] }
      : { orderBy?: AssetTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssetTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AssetType model
 */
readonly fields: AssetTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssetType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssetTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  assets<T extends Prisma.AssetType$assetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetType$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AssetType model
 */
export interface AssetTypeFieldRefs {
  readonly id: Prisma.FieldRef<"AssetType", 'Int'>
  readonly name: Prisma.FieldRef<"AssetType", 'String'>
  readonly fields: Prisma.FieldRef<"AssetType", 'Json'>
}
    

// Custom InputTypes
/**
 * AssetType findUnique
 */
export type AssetTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * Filter, which AssetType to fetch.
   */
  where: Prisma.AssetTypeWhereUniqueInput
}

/**
 * AssetType findUniqueOrThrow
 */
export type AssetTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * Filter, which AssetType to fetch.
   */
  where: Prisma.AssetTypeWhereUniqueInput
}

/**
 * AssetType findFirst
 */
export type AssetTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * Filter, which AssetType to fetch.
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTypes to fetch.
   */
  orderBy?: Prisma.AssetTypeOrderByWithRelationInput | Prisma.AssetTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetTypes.
   */
  cursor?: Prisma.AssetTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetTypes.
   */
  distinct?: Prisma.AssetTypeScalarFieldEnum | Prisma.AssetTypeScalarFieldEnum[]
}

/**
 * AssetType findFirstOrThrow
 */
export type AssetTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * Filter, which AssetType to fetch.
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTypes to fetch.
   */
  orderBy?: Prisma.AssetTypeOrderByWithRelationInput | Prisma.AssetTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetTypes.
   */
  cursor?: Prisma.AssetTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetTypes.
   */
  distinct?: Prisma.AssetTypeScalarFieldEnum | Prisma.AssetTypeScalarFieldEnum[]
}

/**
 * AssetType findMany
 */
export type AssetTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * Filter, which AssetTypes to fetch.
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTypes to fetch.
   */
  orderBy?: Prisma.AssetTypeOrderByWithRelationInput | Prisma.AssetTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AssetTypes.
   */
  cursor?: Prisma.AssetTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTypes.
   */
  skip?: number
  distinct?: Prisma.AssetTypeScalarFieldEnum | Prisma.AssetTypeScalarFieldEnum[]
}

/**
 * AssetType create
 */
export type AssetTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a AssetType.
   */
  data: Prisma.XOR<Prisma.AssetTypeCreateInput, Prisma.AssetTypeUncheckedCreateInput>
}

/**
 * AssetType createMany
 */
export type AssetTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AssetTypes.
   */
  data: Prisma.AssetTypeCreateManyInput | Prisma.AssetTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetType createManyAndReturn
 */
export type AssetTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * The data used to create many AssetTypes.
   */
  data: Prisma.AssetTypeCreateManyInput | Prisma.AssetTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetType update
 */
export type AssetTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a AssetType.
   */
  data: Prisma.XOR<Prisma.AssetTypeUpdateInput, Prisma.AssetTypeUncheckedUpdateInput>
  /**
   * Choose, which AssetType to update.
   */
  where: Prisma.AssetTypeWhereUniqueInput
}

/**
 * AssetType updateMany
 */
export type AssetTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AssetTypes.
   */
  data: Prisma.XOR<Prisma.AssetTypeUpdateManyMutationInput, Prisma.AssetTypeUncheckedUpdateManyInput>
  /**
   * Filter which AssetTypes to update
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * Limit how many AssetTypes to update.
   */
  limit?: number
}

/**
 * AssetType updateManyAndReturn
 */
export type AssetTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * The data used to update AssetTypes.
   */
  data: Prisma.XOR<Prisma.AssetTypeUpdateManyMutationInput, Prisma.AssetTypeUncheckedUpdateManyInput>
  /**
   * Filter which AssetTypes to update
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * Limit how many AssetTypes to update.
   */
  limit?: number
}

/**
 * AssetType upsert
 */
export type AssetTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the AssetType to update in case it exists.
   */
  where: Prisma.AssetTypeWhereUniqueInput
  /**
   * In case the AssetType found by the `where` argument doesn't exist, create a new AssetType with this data.
   */
  create: Prisma.XOR<Prisma.AssetTypeCreateInput, Prisma.AssetTypeUncheckedCreateInput>
  /**
   * In case the AssetType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssetTypeUpdateInput, Prisma.AssetTypeUncheckedUpdateInput>
}

/**
 * AssetType delete
 */
export type AssetTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
  /**
   * Filter which AssetType to delete.
   */
  where: Prisma.AssetTypeWhereUniqueInput
}

/**
 * AssetType deleteMany
 */
export type AssetTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetTypes to delete
   */
  where?: Prisma.AssetTypeWhereInput
  /**
   * Limit how many AssetTypes to delete.
   */
  limit?: number
}

/**
 * AssetType.assets
 */
export type AssetType$assetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Asset
   */
  select?: Prisma.AssetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Asset
   */
  omit?: Prisma.AssetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetInclude<ExtArgs> | null
  where?: Prisma.AssetWhereInput
  orderBy?: Prisma.AssetOrderByWithRelationInput | Prisma.AssetOrderByWithRelationInput[]
  cursor?: Prisma.AssetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetScalarFieldEnum | Prisma.AssetScalarFieldEnum[]
}

/**
 * AssetType without action
 */
export type AssetTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetType
   */
  select?: Prisma.AssetTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetType
   */
  omit?: Prisma.AssetTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTypeInclude<ExtArgs> | null
}
