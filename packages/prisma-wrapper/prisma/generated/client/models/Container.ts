
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Container` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Container
 * 
 */
export type ContainerModel = runtime.Types.Result.DefaultSelection<Prisma.$ContainerPayload>

export type AggregateContainer = {
  _count: ContainerCountAggregateOutputType | null
  _avg: ContainerAvgAggregateOutputType | null
  _sum: ContainerSumAggregateOutputType | null
  _min: ContainerMinAggregateOutputType | null
  _max: ContainerMaxAggregateOutputType | null
}

export type ContainerAvgAggregateOutputType = {
  id: number | null
}

export type ContainerSumAggregateOutputType = {
  id: number | null
}

export type ContainerMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type ContainerMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type ContainerCountAggregateOutputType = {
  id: number
  name: number
  assets: number
  apps: number
  _all: number
}


export type ContainerAvgAggregateInputType = {
  id?: true
}

export type ContainerSumAggregateInputType = {
  id?: true
}

export type ContainerMinAggregateInputType = {
  id?: true
  name?: true
}

export type ContainerMaxAggregateInputType = {
  id?: true
  name?: true
}

export type ContainerCountAggregateInputType = {
  id?: true
  name?: true
  assets?: true
  apps?: true
  _all?: true
}

export type ContainerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Container to aggregate.
   */
  where?: Prisma.ContainerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Containers to fetch.
   */
  orderBy?: Prisma.ContainerOrderByWithRelationInput | Prisma.ContainerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContainerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Containers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Containers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Containers
  **/
  _count?: true | ContainerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ContainerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ContainerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContainerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContainerMaxAggregateInputType
}

export type GetContainerAggregateType<T extends ContainerAggregateArgs> = {
      [P in keyof T & keyof AggregateContainer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContainer[P]>
    : Prisma.GetScalarType<T[P], AggregateContainer[P]>
}




export type ContainerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContainerWhereInput
  orderBy?: Prisma.ContainerOrderByWithAggregationInput | Prisma.ContainerOrderByWithAggregationInput[]
  by: Prisma.ContainerScalarFieldEnum[] | Prisma.ContainerScalarFieldEnum
  having?: Prisma.ContainerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContainerCountAggregateInputType | true
  _avg?: ContainerAvgAggregateInputType
  _sum?: ContainerSumAggregateInputType
  _min?: ContainerMinAggregateInputType
  _max?: ContainerMaxAggregateInputType
}

export type ContainerGroupByOutputType = {
  id: number
  name: string
  assets: runtime.JsonValue
  apps: runtime.JsonValue
  _count: ContainerCountAggregateOutputType | null
  _avg: ContainerAvgAggregateOutputType | null
  _sum: ContainerSumAggregateOutputType | null
  _min: ContainerMinAggregateOutputType | null
  _max: ContainerMaxAggregateOutputType | null
}

type GetContainerGroupByPayload<T extends ContainerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContainerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContainerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContainerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContainerGroupByOutputType[P]>
      }
    >
  >



export type ContainerWhereInput = {
  AND?: Prisma.ContainerWhereInput | Prisma.ContainerWhereInput[]
  OR?: Prisma.ContainerWhereInput[]
  NOT?: Prisma.ContainerWhereInput | Prisma.ContainerWhereInput[]
  id?: Prisma.IntFilter<"Container"> | number
  name?: Prisma.StringFilter<"Container"> | string
  assets?: Prisma.JsonFilter<"Container">
  apps?: Prisma.JsonFilter<"Container">
  PermissionInstance?: Prisma.PermissionInstanceListRelationFilter
}

export type ContainerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  apps?: Prisma.SortOrder
  PermissionInstance?: Prisma.PermissionInstanceOrderByRelationAggregateInput
}

export type ContainerWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ContainerWhereInput | Prisma.ContainerWhereInput[]
  OR?: Prisma.ContainerWhereInput[]
  NOT?: Prisma.ContainerWhereInput | Prisma.ContainerWhereInput[]
  name?: Prisma.StringFilter<"Container"> | string
  assets?: Prisma.JsonFilter<"Container">
  apps?: Prisma.JsonFilter<"Container">
  PermissionInstance?: Prisma.PermissionInstanceListRelationFilter
}, "id">

export type ContainerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  apps?: Prisma.SortOrder
  _count?: Prisma.ContainerCountOrderByAggregateInput
  _avg?: Prisma.ContainerAvgOrderByAggregateInput
  _max?: Prisma.ContainerMaxOrderByAggregateInput
  _min?: Prisma.ContainerMinOrderByAggregateInput
  _sum?: Prisma.ContainerSumOrderByAggregateInput
}

export type ContainerScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContainerScalarWhereWithAggregatesInput | Prisma.ContainerScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContainerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContainerScalarWhereWithAggregatesInput | Prisma.ContainerScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Container"> | number
  name?: Prisma.StringWithAggregatesFilter<"Container"> | string
  assets?: Prisma.JsonWithAggregatesFilter<"Container">
  apps?: Prisma.JsonWithAggregatesFilter<"Container">
}

export type ContainerCreateInput = {
  name: string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  PermissionInstance?: Prisma.PermissionInstanceCreateNestedManyWithoutContainerInput
}

export type ContainerUncheckedCreateInput = {
  id?: number
  name: string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  PermissionInstance?: Prisma.PermissionInstanceUncheckedCreateNestedManyWithoutContainerInput
}

export type ContainerUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  PermissionInstance?: Prisma.PermissionInstanceUpdateManyWithoutContainerNestedInput
}

export type ContainerUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  PermissionInstance?: Prisma.PermissionInstanceUncheckedUpdateManyWithoutContainerNestedInput
}

export type ContainerCreateManyInput = {
  id?: number
  name: string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ContainerUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ContainerUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ContainerNullableScalarRelationFilter = {
  is?: Prisma.ContainerWhereInput | null
  isNot?: Prisma.ContainerWhereInput | null
}

export type ContainerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  apps?: Prisma.SortOrder
}

export type ContainerAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ContainerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type ContainerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type ContainerSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ContainerCreateNestedOneWithoutPermissionInstanceInput = {
  create?: Prisma.XOR<Prisma.ContainerCreateWithoutPermissionInstanceInput, Prisma.ContainerUncheckedCreateWithoutPermissionInstanceInput>
  connectOrCreate?: Prisma.ContainerCreateOrConnectWithoutPermissionInstanceInput
  connect?: Prisma.ContainerWhereUniqueInput
}

export type ContainerUpdateOneWithoutPermissionInstanceNestedInput = {
  create?: Prisma.XOR<Prisma.ContainerCreateWithoutPermissionInstanceInput, Prisma.ContainerUncheckedCreateWithoutPermissionInstanceInput>
  connectOrCreate?: Prisma.ContainerCreateOrConnectWithoutPermissionInstanceInput
  upsert?: Prisma.ContainerUpsertWithoutPermissionInstanceInput
  disconnect?: Prisma.ContainerWhereInput | boolean
  delete?: Prisma.ContainerWhereInput | boolean
  connect?: Prisma.ContainerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContainerUpdateToOneWithWhereWithoutPermissionInstanceInput, Prisma.ContainerUpdateWithoutPermissionInstanceInput>, Prisma.ContainerUncheckedUpdateWithoutPermissionInstanceInput>
}

export type ContainerCreateWithoutPermissionInstanceInput = {
  name: string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ContainerUncheckedCreateWithoutPermissionInstanceInput = {
  id?: number
  name: string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ContainerCreateOrConnectWithoutPermissionInstanceInput = {
  where: Prisma.ContainerWhereUniqueInput
  create: Prisma.XOR<Prisma.ContainerCreateWithoutPermissionInstanceInput, Prisma.ContainerUncheckedCreateWithoutPermissionInstanceInput>
}

export type ContainerUpsertWithoutPermissionInstanceInput = {
  update: Prisma.XOR<Prisma.ContainerUpdateWithoutPermissionInstanceInput, Prisma.ContainerUncheckedUpdateWithoutPermissionInstanceInput>
  create: Prisma.XOR<Prisma.ContainerCreateWithoutPermissionInstanceInput, Prisma.ContainerUncheckedCreateWithoutPermissionInstanceInput>
  where?: Prisma.ContainerWhereInput
}

export type ContainerUpdateToOneWithWhereWithoutPermissionInstanceInput = {
  where?: Prisma.ContainerWhereInput
  data: Prisma.XOR<Prisma.ContainerUpdateWithoutPermissionInstanceInput, Prisma.ContainerUncheckedUpdateWithoutPermissionInstanceInput>
}

export type ContainerUpdateWithoutPermissionInstanceInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ContainerUncheckedUpdateWithoutPermissionInstanceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  apps?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type ContainerCountOutputType
 */

export type ContainerCountOutputType = {
  PermissionInstance: number
}

export type ContainerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PermissionInstance?: boolean | ContainerCountOutputTypeCountPermissionInstanceArgs
}

/**
 * ContainerCountOutputType without action
 */
export type ContainerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContainerCountOutputType
   */
  select?: Prisma.ContainerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ContainerCountOutputType without action
 */
export type ContainerCountOutputTypeCountPermissionInstanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PermissionInstanceWhereInput
}


export type ContainerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  assets?: boolean
  apps?: boolean
  PermissionInstance?: boolean | Prisma.Container$PermissionInstanceArgs<ExtArgs>
  _count?: boolean | Prisma.ContainerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["container"]>

export type ContainerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  assets?: boolean
  apps?: boolean
}, ExtArgs["result"]["container"]>

export type ContainerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  assets?: boolean
  apps?: boolean
}, ExtArgs["result"]["container"]>

export type ContainerSelectScalar = {
  id?: boolean
  name?: boolean
  assets?: boolean
  apps?: boolean
}

export type ContainerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "assets" | "apps", ExtArgs["result"]["container"]>
export type ContainerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PermissionInstance?: boolean | Prisma.Container$PermissionInstanceArgs<ExtArgs>
  _count?: boolean | Prisma.ContainerCountOutputTypeDefaultArgs<ExtArgs>
}
export type ContainerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ContainerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ContainerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Container"
  objects: {
    PermissionInstance: Prisma.$PermissionInstancePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    assets: runtime.JsonValue
    apps: runtime.JsonValue
  }, ExtArgs["result"]["container"]>
  composites: {}
}

export type ContainerGetPayload<S extends boolean | null | undefined | ContainerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContainerPayload, S>

export type ContainerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContainerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContainerCountAggregateInputType | true
  }

export interface ContainerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Container'], meta: { name: 'Container' } }
  /**
   * Find zero or one Container that matches the filter.
   * @param {ContainerFindUniqueArgs} args - Arguments to find a Container
   * @example
   * // Get one Container
   * const container = await prisma.container.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContainerFindUniqueArgs>(args: Prisma.SelectSubset<T, ContainerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Container that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContainerFindUniqueOrThrowArgs} args - Arguments to find a Container
   * @example
   * // Get one Container
   * const container = await prisma.container.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContainerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContainerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Container that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerFindFirstArgs} args - Arguments to find a Container
   * @example
   * // Get one Container
   * const container = await prisma.container.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContainerFindFirstArgs>(args?: Prisma.SelectSubset<T, ContainerFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Container that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerFindFirstOrThrowArgs} args - Arguments to find a Container
   * @example
   * // Get one Container
   * const container = await prisma.container.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContainerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContainerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Containers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Containers
   * const containers = await prisma.container.findMany()
   * 
   * // Get first 10 Containers
   * const containers = await prisma.container.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const containerWithIdOnly = await prisma.container.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContainerFindManyArgs>(args?: Prisma.SelectSubset<T, ContainerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Container.
   * @param {ContainerCreateArgs} args - Arguments to create a Container.
   * @example
   * // Create one Container
   * const Container = await prisma.container.create({
   *   data: {
   *     // ... data to create a Container
   *   }
   * })
   * 
   */
  create<T extends ContainerCreateArgs>(args: Prisma.SelectSubset<T, ContainerCreateArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Containers.
   * @param {ContainerCreateManyArgs} args - Arguments to create many Containers.
   * @example
   * // Create many Containers
   * const container = await prisma.container.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContainerCreateManyArgs>(args?: Prisma.SelectSubset<T, ContainerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Containers and returns the data saved in the database.
   * @param {ContainerCreateManyAndReturnArgs} args - Arguments to create many Containers.
   * @example
   * // Create many Containers
   * const container = await prisma.container.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Containers and only return the `id`
   * const containerWithIdOnly = await prisma.container.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContainerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContainerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Container.
   * @param {ContainerDeleteArgs} args - Arguments to delete one Container.
   * @example
   * // Delete one Container
   * const Container = await prisma.container.delete({
   *   where: {
   *     // ... filter to delete one Container
   *   }
   * })
   * 
   */
  delete<T extends ContainerDeleteArgs>(args: Prisma.SelectSubset<T, ContainerDeleteArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Container.
   * @param {ContainerUpdateArgs} args - Arguments to update one Container.
   * @example
   * // Update one Container
   * const container = await prisma.container.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContainerUpdateArgs>(args: Prisma.SelectSubset<T, ContainerUpdateArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Containers.
   * @param {ContainerDeleteManyArgs} args - Arguments to filter Containers to delete.
   * @example
   * // Delete a few Containers
   * const { count } = await prisma.container.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContainerDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContainerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Containers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Containers
   * const container = await prisma.container.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContainerUpdateManyArgs>(args: Prisma.SelectSubset<T, ContainerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Containers and returns the data updated in the database.
   * @param {ContainerUpdateManyAndReturnArgs} args - Arguments to update many Containers.
   * @example
   * // Update many Containers
   * const container = await prisma.container.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Containers and only return the `id`
   * const containerWithIdOnly = await prisma.container.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContainerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContainerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Container.
   * @param {ContainerUpsertArgs} args - Arguments to update or create a Container.
   * @example
   * // Update or create a Container
   * const container = await prisma.container.upsert({
   *   create: {
   *     // ... data to create a Container
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Container we want to update
   *   }
   * })
   */
  upsert<T extends ContainerUpsertArgs>(args: Prisma.SelectSubset<T, ContainerUpsertArgs<ExtArgs>>): Prisma.Prisma__ContainerClient<runtime.Types.Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Containers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerCountArgs} args - Arguments to filter Containers to count.
   * @example
   * // Count the number of Containers
   * const count = await prisma.container.count({
   *   where: {
   *     // ... the filter for the Containers we want to count
   *   }
   * })
  **/
  count<T extends ContainerCountArgs>(
    args?: Prisma.Subset<T, ContainerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContainerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Container.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContainerAggregateArgs>(args: Prisma.Subset<T, ContainerAggregateArgs>): Prisma.PrismaPromise<GetContainerAggregateType<T>>

  /**
   * Group by Container.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContainerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContainerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContainerGroupByArgs['orderBy'] }
      : { orderBy?: ContainerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContainerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContainerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Container model
 */
readonly fields: ContainerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Container.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContainerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  PermissionInstance<T extends Prisma.Container$PermissionInstanceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Container$PermissionInstanceArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PermissionInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Container model
 */
export interface ContainerFieldRefs {
  readonly id: Prisma.FieldRef<"Container", 'Int'>
  readonly name: Prisma.FieldRef<"Container", 'String'>
  readonly assets: Prisma.FieldRef<"Container", 'Json'>
  readonly apps: Prisma.FieldRef<"Container", 'Json'>
}
    

// Custom InputTypes
/**
 * Container findUnique
 */
export type ContainerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * Filter, which Container to fetch.
   */
  where: Prisma.ContainerWhereUniqueInput
}

/**
 * Container findUniqueOrThrow
 */
export type ContainerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * Filter, which Container to fetch.
   */
  where: Prisma.ContainerWhereUniqueInput
}

/**
 * Container findFirst
 */
export type ContainerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * Filter, which Container to fetch.
   */
  where?: Prisma.ContainerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Containers to fetch.
   */
  orderBy?: Prisma.ContainerOrderByWithRelationInput | Prisma.ContainerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Containers.
   */
  cursor?: Prisma.ContainerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Containers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Containers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Containers.
   */
  distinct?: Prisma.ContainerScalarFieldEnum | Prisma.ContainerScalarFieldEnum[]
}

/**
 * Container findFirstOrThrow
 */
export type ContainerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * Filter, which Container to fetch.
   */
  where?: Prisma.ContainerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Containers to fetch.
   */
  orderBy?: Prisma.ContainerOrderByWithRelationInput | Prisma.ContainerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Containers.
   */
  cursor?: Prisma.ContainerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Containers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Containers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Containers.
   */
  distinct?: Prisma.ContainerScalarFieldEnum | Prisma.ContainerScalarFieldEnum[]
}

/**
 * Container findMany
 */
export type ContainerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * Filter, which Containers to fetch.
   */
  where?: Prisma.ContainerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Containers to fetch.
   */
  orderBy?: Prisma.ContainerOrderByWithRelationInput | Prisma.ContainerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Containers.
   */
  cursor?: Prisma.ContainerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Containers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Containers.
   */
  skip?: number
  distinct?: Prisma.ContainerScalarFieldEnum | Prisma.ContainerScalarFieldEnum[]
}

/**
 * Container create
 */
export type ContainerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * The data needed to create a Container.
   */
  data: Prisma.XOR<Prisma.ContainerCreateInput, Prisma.ContainerUncheckedCreateInput>
}

/**
 * Container createMany
 */
export type ContainerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Containers.
   */
  data: Prisma.ContainerCreateManyInput | Prisma.ContainerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Container createManyAndReturn
 */
export type ContainerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * The data used to create many Containers.
   */
  data: Prisma.ContainerCreateManyInput | Prisma.ContainerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Container update
 */
export type ContainerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * The data needed to update a Container.
   */
  data: Prisma.XOR<Prisma.ContainerUpdateInput, Prisma.ContainerUncheckedUpdateInput>
  /**
   * Choose, which Container to update.
   */
  where: Prisma.ContainerWhereUniqueInput
}

/**
 * Container updateMany
 */
export type ContainerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Containers.
   */
  data: Prisma.XOR<Prisma.ContainerUpdateManyMutationInput, Prisma.ContainerUncheckedUpdateManyInput>
  /**
   * Filter which Containers to update
   */
  where?: Prisma.ContainerWhereInput
  /**
   * Limit how many Containers to update.
   */
  limit?: number
}

/**
 * Container updateManyAndReturn
 */
export type ContainerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * The data used to update Containers.
   */
  data: Prisma.XOR<Prisma.ContainerUpdateManyMutationInput, Prisma.ContainerUncheckedUpdateManyInput>
  /**
   * Filter which Containers to update
   */
  where?: Prisma.ContainerWhereInput
  /**
   * Limit how many Containers to update.
   */
  limit?: number
}

/**
 * Container upsert
 */
export type ContainerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * The filter to search for the Container to update in case it exists.
   */
  where: Prisma.ContainerWhereUniqueInput
  /**
   * In case the Container found by the `where` argument doesn't exist, create a new Container with this data.
   */
  create: Prisma.XOR<Prisma.ContainerCreateInput, Prisma.ContainerUncheckedCreateInput>
  /**
   * In case the Container was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContainerUpdateInput, Prisma.ContainerUncheckedUpdateInput>
}

/**
 * Container delete
 */
export type ContainerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
  /**
   * Filter which Container to delete.
   */
  where: Prisma.ContainerWhereUniqueInput
}

/**
 * Container deleteMany
 */
export type ContainerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Containers to delete
   */
  where?: Prisma.ContainerWhereInput
  /**
   * Limit how many Containers to delete.
   */
  limit?: number
}

/**
 * Container.PermissionInstance
 */
export type Container$PermissionInstanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PermissionInstance
   */
  select?: Prisma.PermissionInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PermissionInstance
   */
  omit?: Prisma.PermissionInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionInstanceInclude<ExtArgs> | null
  where?: Prisma.PermissionInstanceWhereInput
  orderBy?: Prisma.PermissionInstanceOrderByWithRelationInput | Prisma.PermissionInstanceOrderByWithRelationInput[]
  cursor?: Prisma.PermissionInstanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PermissionInstanceScalarFieldEnum | Prisma.PermissionInstanceScalarFieldEnum[]
}

/**
 * Container without action
 */
export type ContainerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Container
   */
  select?: Prisma.ContainerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Container
   */
  omit?: Prisma.ContainerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContainerInclude<ExtArgs> | null
}
