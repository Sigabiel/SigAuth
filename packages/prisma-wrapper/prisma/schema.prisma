// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           Int       @id @default(autoincrement())
  email        String?   @unique
  name         String    @unique
  api          String?   @unique // token
  secondFactor String?   @unique // token
  password     String
  sessions     Session[]
  accounts     Json      @default("[]") // number[]

  permissions PermissionInstance[]
}

// login session for the main idp
model Session {
  id String @id @unique

  subject Int
  expire  Int
  created Int

  account Account @relation(fields: [subject], references: [id])

  challenges AuthorizationChallenge[]
  instances  AuthorizationInstance[]
}

// currently active authorization tokens provided to third parties
model AuthorizationInstance {
  id        Int    @id @default(autoincrement())
  sessionId String

  accessToken  String @unique
  refreshToken String @unique

  accessTokenExpire  Int
  refreshTokenExpire Int

  session Session @relation(fields: [sessionId], references: [id])
}

// pending authorization codes
model AuthorizationChallenge {
  id        Int    @id @default(autoincrement())
  sessionId String
  appId     Int

  authorizationCode String   @unique
  challenge         String?  @unique
  created           DateTime @default(now())

  session Session @relation(fields: [sessionId], references: [id])
  app     App     @relation(fields: [appId], references: [id])
}

model PermissionInstance {
  id          Int    @id @default(autoincrement()) // this is only because an prim key is required but we can't form a consitent prim key from the fields below
  accountId   Int
  containerId Int? // nullable for root permissions
  appId       Int
  identifier  String
  assetId     Int? // null for container permission

  app       App        @relation(fields: [appId], references: [id])
  account   Account    @relation(fields: [accountId], references: [id])
  asset     Asset?     @relation(fields: [assetId], references: [id])
  container Container? @relation(fields: [containerId], references: [id])

  @@unique([accountId, appId, identifier, containerId, assetId])
  // todo find our which indexes make the most sense
  @@index([accountId])
  @@index([accountId, appId])
  @@index([accountId, assetId])
  @@index([accountId, identifier])
}

// todo add roles and mirrors

model AssetType {
  id     Int     @id @default(autoincrement())
  name   String
  fields Json
  assets Asset[]
}

model Asset {
  id     Int       @id @default(autoincrement())
  name   String
  typeId Int
  fields Json
  type   AssetType @relation(fields: [typeId], references: [id])

  PermissionInstance PermissionInstance[]
}

// TODO add a relation table for container-apps and container-assets to simply mainting the integrity of the database
model Container {
  id                 Int                  @id @default(autoincrement())
  name               String
  assets             Int[]                @default([])
  apps               Int[]                @default([])
  PermissionInstance PermissionInstance[]
}

model App {
  id              Int     @id @default(autoincrement())
  name            String
  url             String
  oidcAuthCodeUrl String?
  token           String  @unique
  permissions     Json
  webFetch        Json

  PermissionInstance     PermissionInstance[]
  AuthorizationChallenge AuthorizationChallenge[]
}
